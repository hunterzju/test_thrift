/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef caculateJosephu_H
#define caculateJosephu_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "test_types.h"

namespace tutorial {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class caculateJosephuIf {
 public:
  virtual ~caculateJosephuIf() {}
  virtual int32_t Josephu(const int32_t logid, const Work& w) = 0;
};

class caculateJosephuIfFactory {
 public:
  typedef caculateJosephuIf Handler;

  virtual ~caculateJosephuIfFactory() {}

  virtual caculateJosephuIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(caculateJosephuIf* /* handler */) = 0;
};

class caculateJosephuIfSingletonFactory : virtual public caculateJosephuIfFactory {
 public:
  caculateJosephuIfSingletonFactory(const boost::shared_ptr<caculateJosephuIf>& iface) : iface_(iface) {}
  virtual ~caculateJosephuIfSingletonFactory() {}

  virtual caculateJosephuIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(caculateJosephuIf* /* handler */) {}

 protected:
  boost::shared_ptr<caculateJosephuIf> iface_;
};

class caculateJosephuNull : virtual public caculateJosephuIf {
 public:
  virtual ~caculateJosephuNull() {}
  int32_t Josephu(const int32_t /* logid */, const Work& /* w */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _caculateJosephu_Josephu_args__isset {
  _caculateJosephu_Josephu_args__isset() : logid(false), w(false) {}
  bool logid :1;
  bool w :1;
} _caculateJosephu_Josephu_args__isset;

class caculateJosephu_Josephu_args {
 public:

  caculateJosephu_Josephu_args(const caculateJosephu_Josephu_args&);
  caculateJosephu_Josephu_args& operator=(const caculateJosephu_Josephu_args&);
  caculateJosephu_Josephu_args() : logid(0) {
  }

  virtual ~caculateJosephu_Josephu_args() throw();
  int32_t logid;
  Work w;

  _caculateJosephu_Josephu_args__isset __isset;

  void __set_logid(const int32_t val);

  void __set_w(const Work& val);

  bool operator == (const caculateJosephu_Josephu_args & rhs) const
  {
    if (!(logid == rhs.logid))
      return false;
    if (!(w == rhs.w))
      return false;
    return true;
  }
  bool operator != (const caculateJosephu_Josephu_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const caculateJosephu_Josephu_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class caculateJosephu_Josephu_pargs {
 public:


  virtual ~caculateJosephu_Josephu_pargs() throw();
  const int32_t* logid;
  const Work* w;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _caculateJosephu_Josephu_result__isset {
  _caculateJosephu_Josephu_result__isset() : success(false), errinfo(false) {}
  bool success :1;
  bool errinfo :1;
} _caculateJosephu_Josephu_result__isset;

class caculateJosephu_Josephu_result {
 public:

  caculateJosephu_Josephu_result(const caculateJosephu_Josephu_result&);
  caculateJosephu_Josephu_result& operator=(const caculateJosephu_Josephu_result&);
  caculateJosephu_Josephu_result() : success(0) {
  }

  virtual ~caculateJosephu_Josephu_result() throw();
  int32_t success;
  InvalidOperation errinfo;

  _caculateJosephu_Josephu_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_errinfo(const InvalidOperation& val);

  bool operator == (const caculateJosephu_Josephu_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(errinfo == rhs.errinfo))
      return false;
    return true;
  }
  bool operator != (const caculateJosephu_Josephu_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const caculateJosephu_Josephu_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _caculateJosephu_Josephu_presult__isset {
  _caculateJosephu_Josephu_presult__isset() : success(false), errinfo(false) {}
  bool success :1;
  bool errinfo :1;
} _caculateJosephu_Josephu_presult__isset;

class caculateJosephu_Josephu_presult {
 public:


  virtual ~caculateJosephu_Josephu_presult() throw();
  int32_t* success;
  InvalidOperation errinfo;

  _caculateJosephu_Josephu_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class caculateJosephuClient : virtual public caculateJosephuIf {
 public:
  caculateJosephuClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  caculateJosephuClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Josephu(const int32_t logid, const Work& w);
  void send_Josephu(const int32_t logid, const Work& w);
  int32_t recv_Josephu();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class caculateJosephuProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<caculateJosephuIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (caculateJosephuProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Josephu(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  caculateJosephuProcessor(boost::shared_ptr<caculateJosephuIf> iface) :
    iface_(iface) {
    processMap_["Josephu"] = &caculateJosephuProcessor::process_Josephu;
  }

  virtual ~caculateJosephuProcessor() {}
};

class caculateJosephuProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  caculateJosephuProcessorFactory(const ::boost::shared_ptr< caculateJosephuIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< caculateJosephuIfFactory > handlerFactory_;
};

class caculateJosephuMultiface : virtual public caculateJosephuIf {
 public:
  caculateJosephuMultiface(std::vector<boost::shared_ptr<caculateJosephuIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~caculateJosephuMultiface() {}
 protected:
  std::vector<boost::shared_ptr<caculateJosephuIf> > ifaces_;
  caculateJosephuMultiface() {}
  void add(boost::shared_ptr<caculateJosephuIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t Josephu(const int32_t logid, const Work& w) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Josephu(logid, w);
    }
    return ifaces_[i]->Josephu(logid, w);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class caculateJosephuConcurrentClient : virtual public caculateJosephuIf {
 public:
  caculateJosephuConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  caculateJosephuConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t Josephu(const int32_t logid, const Work& w);
  int32_t send_Josephu(const int32_t logid, const Work& w);
  int32_t recv_Josephu(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
